import { resolve } from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs-extra';
import dedent from 'dedent';
import { dirname } from 'pathe';
import { trpcLog } from './create-logger';

const __dirname = dirname(fileURLToPath(import.meta.url));

export const generateTrpcRouter = () => {
  const MODULES_PATH = resolve(__dirname, '../..');
  const moduleDirs = fs
    .readdirSync(MODULES_PATH)
    .map(fileOrDir => ({
      name: fileOrDir,
      path: resolve(MODULES_PATH, fileOrDir)
    }))
    .filter(({ path }) => fs.lstatSync(path).isDirectory);

  const modulesWithRouter = moduleDirs.filter(({ path }) =>
    fs.existsSync(resolve(path, 'trpc-router.ts'))
  );

  const routerImportBlocks = modulesWithRouter.map(
    ({ name }) =>
      `import { default as ${name}Router } from '@/modules/${name}/server/trpc-router';`
  );

  const routerBlocks = modulesWithRouter.map(({ name }) => {
    return dedent`.merge('${name}.', ${name}Router)`;
  });

  const routerPath = resolve(process.cwd(), 'src/generated/trpc-router.ts');
  fs.ensureFileSync(routerPath);

  const template = dedent`
  /* 
    THIS IS A GENERATED FILE. DO NOT EDIT
    This file is automatically generated when bootstraping the application
  */
  
  import * as trpc from '@trpc/server';
  import { createRouter } from '@/modules/trpc/utils/create-router';
  ${routerImportBlocks.join('\n')}
  export const router = trpc.router()${routerBlocks.join('\n')}`;

  fs.writeFileSync(routerPath, template);

  trpcLog('TRPC Router generated');
};
